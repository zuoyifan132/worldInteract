{
  "metadata": {
    "source": "/Users/evan/Desktop/work/蚂蚁/worldInteract/data/raw_apis",
    "processing_stats": {
      "total_input": 169,
      "fixed": 161,
      "removed_duplicates": 3,
      "removed_invalid": 8,
      "final_count": 158
    },
    "total_apis": 158
  },
  "apis": [
    {
      "name": "add_to_watchlist",
      "description": "Facilitates adding a specified stock symbol to the user's watchlist for monitoring.",
      "parameters": {
        "stock": {
          "type": "string",
          "description": "The stock symbol (ticker) that the user wishes to add to their watchlist."
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "symbol": {
            "type": "string",
            "description": "The stock symbol that has been successfully added to the watchlist."
          }
        }
      }
    },
    {
      "name": "cancel_order",
      "description": "Cancels a specified trading order within the trading system.",
      "parameters": {
        "order_id": {
          "type": "integer",
          "description": "Unique identifier of the order that is to be cancelled."
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "order_id": {
            "type": "integer",
            "description": "Unique identifier of the order that was successfully cancelled."
          },
          "status": {
            "type": "string",
            "description": "Current status of the order following the cancellation request (e.g., 'Cancelled', 'Not Found')."
          }
        }
      }
    },
    {
      "name": "filter_stocks_by_price",
      "description": "Filter stocks by a specified price range within the trading system.",
      "parameters": {
        "stocks": {
          "type": "array",
          "description": "An array of stock symbols that will be filtered based on the defined price range."
        },
        "min_price": {
          "type": "float",
          "description": "The minimum price threshold for filtering stocks. Stocks priced below this value will be excluded from the results."
        },
        "max_price": {
          "type": "float",
          "description": "The maximum price threshold for filtering stocks. Stocks priced above this value will be excluded from the results."
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "filtered_stocks": {
            "type": "array",
            "description": "An array of stock symbols that fall within the specified price range (inclusive of min_price and max_price).",
            "items": {
              "type": "string"
            }
          }
        }
      }
    },
    {
      "name": "fund_account",
      "description": "Funds the user’s trading account with a specified monetary amount.",
      "parameters": {
        "amount": {
          "type": "float",
          "description": "The monetary amount to be deposited into the trading account."
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "status": {
            "type": "string",
            "description": "Indicates the result of the funding operation, e.g., 'success' or 'failure'."
          },
          "new_balance": {
            "type": "float",
            "description": "The new total balance of the account after the funding has been processed."
          }
        }
      }
    },
    {
      "name": "get_account_info",
      "description": "Retrieves detailed information about a user's trading account.",
      "parameters": {},
      "returns": {
        "type": "dict",
        "properties": {
          "account_id": {
            "type": "integer",
            "description": "Unique identifier for the user's trading account."
          },
          "balance": {
            "type": "float",
            "description": "Current monetary balance available in the trading account."
          },
          "binding_card": {
            "type": "integer",
            "description": "Identifier for the bank card linked to the trading account."
          }
        }
      }
    },
    {
      "name": "get_available_stocks",
      "description": "This tool belongs to the trading system, which allows users to trade stocks, manage their account, and view stock information. Tool description: Get a list of stock symbols in the given sector.",
      "parameters": {
        "sector": {
          "type": "string",
          "description": "The sector to retrieve stocks from (e.g., 'Technology')."
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "stock_list": {
            "type": "array",
            "description": "List of stock symbols in the specified sector.",
            "items": {
              "type": "string"
            }
          }
        }
      }
    },
    {
      "name": "get_current_time",
      "description": "Fetches the current system time for trading sessions.",
      "parameters": {},
      "returns": {
        "type": "dict",
        "properties": {
          "current_time": {
            "type": "string",
            "description": "Current time in 12-hour format (HH:MM AM/PM) indicating the local time of the trading system."
          }
        }
      }
    },
    {
      "name": "get_order_details",
      "description": "Retrieve detailed information about a specific order in the trading system.",
      "parameters": {
        "order_id": {
          "type": "integer",
          "description": "Unique identifier for the order whose details are being requested."
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier associated with the order."
          },
          "order_type": {
            "type": "string",
            "description": "Specification of the order type, such as 'buy' or 'sell'."
          },
          "symbol": {
            "type": "string",
            "description": "Stock symbol corresponding to the order, representing the traded stock."
          },
          "price": {
            "type": "float",
            "description": "Price per share at which the order was executed."
          },
          "amount": {
            "type": "integer",
            "description": "Total number of shares specified in the order."
          },
          "status": {
            "type": "string",
            "description": "Current operational state of the order, which can be one of the following: [\"Open\", \"Pending\", \"Completed\", \"Cancelled\"]"
          }
        }
      }
    },
    {
      "name": "get_order_history",
      "description": "Retrieves the history of stock order IDs for a user's trading account.",
      "parameters": {},
      "returns": {
        "type": "dict",
        "properties": {
          "order_history": {
            "type": "array",
            "description": "An array containing the IDs of orders from the user's transaction history.",
            "items": {
              "type": "integer"
            }
          }
        }
      }
    },
    {
      "name": "get_stock_info",
      "description": "Retrieve detailed information about a specified stock including pricing and volume data.",
      "parameters": {
        "symbol": {
          "type": "string",
          "description": "A unique ticker symbol representing the stock to be queried."
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "price": {
            "type": "float",
            "description": "The current market price of the specified stock."
          },
          "percent_change": {
            "type": "float",
            "description": "The percentage change in the stock's price compared to the previous trading session."
          },
          "volume": {
            "type": "float",
            "description": "The total trading volume of the stock during the last trading session."
          },
          "MA(5)": {
            "type": "float",
            "description": "The 5-day moving average price of the stock, indicative of short-term trends."
          },
          "MA(20)": {
            "type": "float",
            "description": "The 20-day moving average price of the stock, indicative of medium-term trends."
          }
        }
      }
    },
    {
      "name": "get_symbol_by_name",
      "description": "Retrieve the stock symbol associated with a specified company name.",
      "parameters": {
        "name": {
          "type": "string",
          "description": "The full name of the company for which the stock symbol is requested."
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "symbol": {
            "type": "string",
            "description": "The stock symbol of the requested company. Returns 'Stock not found' if the symbol cannot be identified."
          }
        }
      }
    },
    {
      "name": "get_transaction_history",
      "description": "Retrieves transaction history for a specified date range within a trading system.",
      "parameters": {
        "start_date": {
          "type": "string",
          "description": "The starting date for the transaction history query (format: 'YYYY-MM-DD').",
          "default": "None"
        },
        "end_date": {
          "type": "string",
          "description": "The ending date for the transaction history query (format: 'YYYY-MM-DD').",
          "default": "None"
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "transaction_history": {
            "type": "array",
            "description": "An array of transaction records that occurred within the specified date range.",
            "items": {
              "type": "dict",
              "properties": {
                "type": {
                  "type": "string",
                  "description": "Indicates the nature of the transaction. Possible values: 'deposit' or 'withdrawal'."
                },
                "amount": {
                  "type": "float",
                  "description": "The monetary value involved in the transaction."
                },
                "timestamp": {
                  "type": "string",
                  "description": "The date and time when the transaction was processed, formatted as 'YYYY-MM-DD HH:MM:SS'."
                }
              }
            }
          }
        }
      }
    },
    {
      "name": "get_watchlist",
      "description": "Retrieves the user's stock watchlist from the trading system.",
      "parameters": {},
      "returns": {
        "type": "dict",
        "properties": {
          "watchlist": {
            "type": "array",
            "description": "An array containing the stock symbols currently on the user's watchlist.",
            "items": {
              "type": "string"
            }
          }
        }
      }
    },
    {
      "name": "make_transaction",
      "description": "Facilitates deposits or withdrawals from a specified trading account.",
      "parameters": {
        "account_id": {
          "type": "integer",
          "description": "The unique identifier for the trading account."
        },
        "xact_type": {
          "type": "string",
          "description": "Type of transaction to perform, either 'deposit' or 'withdrawal'."
        },
        "amount": {
          "type": "float",
          "description": "The monetary amount to be deposited or withdrawn, represented as a float."
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "status": {
            "type": "string",
            "description": "Indicates the success or failure of the transaction operation."
          },
          "new_balance": {
            "type": "float",
            "description": "Reflects the updated balance of the account following the transaction."
          }
        }
      }
    },
    {
      "name": "notify_price_change",
      "description": "Notify users of significant price changes in specified stocks based on a percentage threshold.",
      "parameters": {
        "stocks": {
          "type": "array",
          "description": "An array of stock symbols (e.g., 'AAPL', 'GOOGL') to monitor for price changes."
        },
        "threshold": {
          "type": "float",
          "description": "The percentage change in stock price that will trigger a notification when exceeded."
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "notification": {
            "type": "string",
            "description": "A message detailing the significant price change for the monitored stocks, including which stocks were affected and the extent of the change."
          }
        }
      }
    },
    {
      "name": "place_order",
      "description": "Facilitates the placement of stock trading orders within the trading system.",
      "parameters": {
        "order_type": {
          "type": "string",
          "description": "Specifies the nature of the order, either 'Buy' to purchase shares or 'Sell' to dispose of shares."
        },
        "symbol": {
          "type": "string",
          "description": "Denotes the ticker symbol of the stock that the user intends to trade."
        },
        "price": {
          "type": "float",
          "description": "Indicates the price per share at which the order should be executed."
        },
        "amount": {
          "type": "integer",
          "description": "Defines the total number of shares to be bought or sold in this order."
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "order_id": {
            "type": "integer",
            "description": "Unique identifier for the newly created trading order."
          },
          "order_type": {
            "type": "string",
            "description": "Indicates the type of the order that was placed ('Buy' or 'Sell')."
          },
          "status": {
            "type": "string",
            "description": "Reflects the current status of the order, which may indicate if it is pending, executed, or canceled."
          },
          "price": {
            "type": "float",
            "description": "Records the price at which the order was successfully placed."
          },
          "amount": {
            "type": "integer",
            "description": "Confirms the number of shares included in the order."
          }
        }
      }
    },
    {
      "name": "remove_stock_from_watchlist",
      "description": "Removes a specified stock from the user's watchlist in the trading system.",
      "parameters": {
        "symbol": {
          "type": "string",
          "description": "The stock's symbol that identifies the stock to be removed from the watchlist."
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "status": {
            "type": "string",
            "description": "Indicates the success or failure of the stock removal operation, providing relevant information."
          }
        }
      }
    },
    {
      "name": "trading_get_login_status",
      "description": "Retrieves the current login status of the user in the trading system.",
      "parameters": {},
      "returns": {
        "type": "dict",
        "properties": {
          "status": {
            "type": "boolean",
            "description": "Indicates whether the user is currently logged in (true) or not (false)."
          }
        }
      }
    },
    {
      "name": "trading_login",
      "description": "Facilitates user authentication for trading operations, enabling account access and management.",
      "parameters": {
        "username": {
          "type": "string",
          "description": "The unique username associated with the user's trading account, required for authentication."
        },
        "password": {
          "type": "string",
          "description": "The password corresponding to the provided username, used to validate user identity."
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "status": {
            "type": "string",
            "description": "Message indicating the result of the login attempt, such as 'success' or 'invalid credentials'."
          }
        }
      }
    },
    {
      "name": "trading_logout",
      "description": "Facilitates user logout from the trading system for account security.",
      "parameters": {},
      "returns": {
        "type": "dict",
        "properties": {
          "status": {
            "type": "string",
            "description": "A message indicating the result of the logout process (e.g., 'Logout successful' or 'Logout failed')."
          }
        }
      }
    },
    {
      "name": "update_market_status",
      "description": "Updates the market status (Open/Closed) based on the provided current time.",
      "parameters": {
        "current_time_str": {
          "type": "string",
          "description": "The current time formatted as 'HH:MM AM/PM', indicating the local time to assess market status."
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "status": {
            "type": "string",
            "description": "Indicates the current operational status of the market. Possible values are 'Open' or 'Closed'."
          }
        }
      }
    },
    {
      "name": "update_stock_price",
      "description": "Updates the market price of a specified stock in the trading system.",
      "parameters": {
        "symbol": {
          "type": "string",
          "description": "The unique ticker symbol of the stock for which the price is to be updated."
        },
        "new_price": {
          "type": "float",
          "description": "The new market price to be set for the specified stock."
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "symbol": {
            "type": "string",
            "description": "The ticker symbol of the stock that was updated."
          },
          "old_price": {
            "type": "float",
            "description": "The previous market price of the stock before the update."
          },
          "new_price": {
            "type": "float",
            "description": "The updated market price of the stock after the change."
          }
        }
      }
    },
    {
      "name": "close_ticket",
      "description": "Closes a specified support ticket in the company's ticketing system.",
      "parameters": {
        "ticket_id": {
          "type": "integer",
          "description": "The unique identifier of the ticket that needs to be closed."
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "status": {
            "type": "string",
            "description": "Indicates the result of the ticket closure operation (e.g., 'success' or 'failure')."
          }
        }
      }
    },
    {
      "name": "create_ticket",
      "description": "This tool belongs to the ticketing system that is part of a company, which allows users to create, view, and manage support business tickets. Tool description: Create a ticket in the system and queue it.",
      "parameters": {
        "title": {
          "type": "string",
          "description": "Title of the ticket."
        },
        "description": {
          "type": "string",
          "description": "Description of the ticket. Defaults to an empty string.",
          "default": ""
        },
        "priority": {
          "type": "integer",
          "description": "Priority of the ticket, from 1 to 5. Defaults to 1. 5 is the highest priority.",
          "default": 1
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier of the ticket."
          },
          "title": {
            "type": "string",
            "description": "Title of the ticket."
          },
          "description": {
            "type": "string",
            "description": "Description of the ticket."
          },
          "status": {
            "type": "string",
            "description": "Current status of the ticket."
          },
          "priority": {
            "type": "integer",
            "description": "Priority level of the ticket."
          }
        }
      }
    },
    {
      "name": "edit_ticket",
      "description": "Modifies the details of an existing support ticket within the ticketing system.",
      "parameters": {
        "ticket_id": {
          "type": "integer",
          "description": "The unique identifier of the ticket that is to be modified."
        },
        "updates": {
          "type": "dict",
          "description": "A dictionary containing the fields to update. Possible fields include: - title (str): [Optional] The new title for the ticket."
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "status": {
            "type": "string",
            "description": "Indicates the outcome of the update operation, such as 'success' or 'failure'."
          }
        }
      }
    },
    {
      "name": "get_ticket",
      "description": "Retrieves detailed information about a specific support ticket using its ID.",
      "parameters": {
        "ticket_id": {
          "type": "integer",
          "description": "The unique identifier for the ticket to be retrieved, which must be valid and exist in the system."
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique identifier assigned to the retrieved ticket."
          },
          "title": {
            "type": "string",
            "description": "The title or summary of the ticket."
          },
          "description": {
            "type": "string",
            "description": "A detailed description providing further information about the ticket's issue."
          },
          "status": {
            "type": "string",
            "description": "The current status of the ticket, indicating whether it is open, in progress, or closed."
          },
          "priority": {
            "type": "integer",
            "description": "The priority level of the ticket, often defined as a numeric scale (e.g., 1 for highest priority, 5 for lowest)."
          },
          "created_by": {
            "type": "string",
            "description": "The username of the individual who created the ticket, allowing for tracking and accountability."
          }
        }
      }
    },
    {
      "name": "get_user_tickets",
      "description": "Retrieve all support tickets created by the current user, with optional status filtering.",
      "parameters": {
        "status": {
          "type": "string",
          "description": "Filter to specify the status of tickets to return. If not provided, all tickets will be returned.",
          "default": "None"
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique identifier for each ticket."
          },
          "title": {
            "type": "string",
            "description": "The title summarizing the content of the ticket."
          },
          "description": {
            "type": "string",
            "description": "A detailed description outlining the issues or requests associated with the ticket."
          },
          "status": {
            "type": "string",
            "description": "The current processing status of the ticket, such as 'Open', 'In Progress', or 'Closed'."
          },
          "priority": {
            "type": "integer",
            "description": "The priority level of the ticket, indicating its urgency: typically rated from 1 (lowest) to 5 (highest)."
          },
          "created_by": {
            "type": "string",
            "description": "The username or ID of the user who created the ticket."
          }
        }
      }
    },
    {
      "name": "logout",
      "description": "Logs out the currently authenticated user from the ticketing system.",
      "parameters": {},
      "returns": {
        "type": "dict",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Indicates whether the logout operation was successful (true) or failed (false)."
          }
        }
      }
    },
    {
      "name": "resolve_ticket",
      "description": "Resolve a support ticket by providing necessary resolution details.",
      "parameters": {
        "ticket_id": {
          "type": "integer",
          "description": "Unique identifier for the ticket that needs to be resolved."
        },
        "resolution": {
          "type": "string",
          "description": "Detailed information regarding the resolution applied to the ticket."
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "status": {
            "type": "string",
            "description": "Indicates the outcome of the ticket resolution operation (e.g., 'success' or 'failure')."
          }
        }
      }
    },
    {
      "name": "ticket_get_login_status",
      "description": "Retrieves the username of the currently authenticated user in the ticketing system.",
      "parameters": {},
      "returns": {
        "type": "dict",
        "properties": {
          "username": {
            "type": "string",
            "description": "The username of the logged-in user, or an empty string if no user is authenticated."
          },
          "is_logged_in": {
            "type": "boolean",
            "description": "Indicates whether a user is currently logged in. Returns true if logged in, false otherwise."
          }
        }
      }
    },
    {
      "name": "ticket_login",
      "description": "Authenticates a user for the company ticketing system, enabling access to ticket management functionalities.",
      "parameters": {
        "username": {
          "type": "string",
          "description": "The unique username associated with the user's account in the ticketing system."
        },
        "password": {
          "type": "string",
          "description": "The password corresponding to the provided username, used for authentication."
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Indicates whether the login attempt was successful (true) or failed (false)."
          }
        }
      }
    },
    {
      "name": "cat",
      "description": "Displays the contents of a specified file from the current directory.",
      "parameters": {
        "file_name": {
          "type": "string",
          "description": "The name of the file (without path) located in the current directory whose contents are to be displayed."
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "file_content": {
            "type": "string",
            "description": "The complete content of the specified file, retrieved from the current directory."
          }
        }
      }
    },
    {
      "name": "diff",
      "description": "Compares two files line by line in the current directory, highlighting differences.",
      "parameters": {
        "file_name1": {
          "type": "string",
          "description": "The name of the first file to compare, located in the current directory."
        },
        "file_name2": {
          "type": "string",
          "description": "The name of the second file to compare, located in the current directory."
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "diff_lines": {
            "type": "string",
            "description": "A string representation of the differences between the two files line by line."
          }
        }
      }
    },
    {
      "name": "echo",
      "description": "Writes content to a specified file or displays it in the terminal if no file is indicated.",
      "parameters": {
        "content": {
          "type": "string",
          "description": "The text content to be written to the specified file or displayed in the terminal."
        },
        "file_name": {
          "type": "string",
          "description": "The name of the target file in the current directory to write the content to. If not specified, content will be displayed in the terminal.",
          "default": "None"
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "terminal_output": {
            "type": "string",
            "description": "The content that is displayed in the terminal if no file name is provided; returns None if the content is written successfully to a file."
          }
        }
      }
    },
    {
      "name": "find",
      "description": "Search for files and directories containing a specified name in a given path.",
      "parameters": {
        "path": {
          "type": "string",
          "description": "The starting directory path for the search. Defaults to the current directory (\".\").",
          "default": "."
        },
        "name": {
          "type": "string",
          "description": "The name pattern of the file or directory to locate. If not specified, all files and directories in the path are returned.",
          "default": "None"
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "matches": {
            "type": "array",
            "description": "An array containing the paths of files and directories relative to the specified path that match the search criteria.",
            "items": {
              "type": "string"
            }
          }
        }
      }
    },
    {
      "name": "grep",
      "description": "Searches for lines in a specified file that match a provided pattern within the current directory.",
      "parameters": {
        "file_name": {
          "type": "string",
          "description": "The name of the target file, without any path. The file must reside in the current local directory."
        },
        "pattern": {
          "type": "string",
          "description": "The string pattern to search for within the specified file."
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "matching_lines": {
            "type": "array",
            "description": "An array of lines from the file that contain the specified pattern.",
            "items": {
              "type": "string"
            }
          }
        }
      }
    },
    {
      "name": "mkdir",
      "description": "Create a new directory within the current working directory in the Gorilla file system.",
      "parameters": {
        "dir_name": {
          "type": "string",
          "description": "Specifies the name of the new directory to be created in the current directory."
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Indicates whether the directory creation was successful."
          },
          "message": {
            "type": "string",
            "description": "Provides additional information regarding the result of the operation, including error messages if applicable."
          }
        }
      }
    },
    {
      "name": "pwd",
      "description": "Retrieves the path of the current working directory in the Gorilla file system.",
      "parameters": {},
      "returns": {
        "type": "dict",
        "properties": {
          "current_working_directory": {
            "type": "string",
            "description": "A string representing the complete path to the current working directory."
          }
        }
      }
    },
    {
      "name": "rmdir",
      "description": "Remove a specified directory from the current working directory within the Gorilla file system.",
      "parameters": {
        "dir_name": {
          "type": "string",
          "description": "The name of the directory to be removed. The directory must be located in the current working directory."
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "result": {
            "type": "string",
            "description": "A message indicating the success or failure of the directory removal operation."
          }
        }
      }
    },
    {
      "name": "sort",
      "description": "Sorts the contents of a specified file line by line.",
      "parameters": {
        "file_name": {
          "type": "string",
          "description": "The name of the file located in the current directory whose contents are to be sorted."
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "sorted_content": {
            "type": "string",
            "description": "The line-by-line sorted content of the specified file."
          }
        }
      }
    },
    {
      "name": "tail",
      "description": "Retrieve and display the last few lines of a specified file in the Gorilla file system.",
      "parameters": {
        "file_name": {
          "type": "string",
          "description": "The name of the file to retrieve lines from. Only the file name is allowed; no directory paths are permitted. The file must reside in the local directory."
        },
        "lines": {
          "type": "integer",
          "description": "The number of lines to display from the end of the specified file. The default value is set to 10 lines if not provided.",
          "default": 10
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "last_lines": {
            "type": "string",
            "description": "A string containing the last specified number of lines from the file, returned in the order that they appear."
          }
        }
      }
    },
    {
      "name": "touch",
      "description": "Creates a new file with a specified name in the current directory of the Gorilla file system.",
      "parameters": {
        "file_name": {
          "type": "string",
          "description": "The name of the file to be created. This name must not include any directory paths and should support various file extensions."
        }
      },
      "returns": {
        "type": "dict",
        "description": "Returns an empty dictionary indicating that the file has been successfully created."
      }
    },
    {
      "name": "activateparkingbrake",
      "description": "Activates or releases the parking brake of the vehicle.",
      "parameters": {
        "mode": {
          "type": "string",
          "description": "Specifies the action to perform on the parking brake. Use 'engage' to activate the brake or 'release' to deactivate it."
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "parkingBrakeStatus": {
            "type": "string",
            "description": "Indicates the current status of the parking brake. Possible values are 'engaged' when the brake is active and 'released' when it is inactive."
          },
          "_parkingBrakeForce": {
            "type": "float",
            "description": "The magnitude of the force applied to the parking brake, measured in Newtons."
          },
          "_slopeAngle": {
            "type": "float",
            "description": "The angle of the slope on which the vehicle is positioned, measured in degrees."
          }
        }
      }
    },
    {
      "name": "adjustclimatecontrol",
      "description": "Adjusts the climate control settings of the vehicle for optimal comfort.",
      "parameters": {
        "temperature": {
          "type": "float",
          "description": "The desired temperature to set in degrees. Default is in Celsius."
        },
        "unit": {
          "type": "string",
          "description": "The unit of temperature to be used. Options are: [\"celsius\", \"fahrenheit\"]",
          "default": "celsius"
        },
        "fanSpeed": {
          "type": "integer",
          "description": "The speed of the fan to be set, ranging from 0 (off) to 100 (maximum speed). Default is 50.",
          "default": 50
        },
        "mode": {
          "type": "string",
          "description": "The selected climate control mode. Options are: [\"auto\", \"cool\", \"heat\", \"defrost\"]",
          "default": "auto"
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "currentTemperature": {
            "type": "float",
            "description": "The currently set temperature in degrees Celsius."
          },
          "climateMode": {
            "type": "string",
            "description": "The active climate control mode currently in effect."
          },
          "humidityLevel": {
            "type": "float",
            "description": "The current humidity level expressed as a percentage."
          }
        }
      }
    },
    {
      "name": "check_tire_pressure",
      "description": "This tool checks the tire pressure of the vehicle to ensure safe operation.",
      "parameters": {},
      "returns": {
        "type": "dict",
        "properties": {
          "tirePressure": {
            "type": "dict",
            "description": "A comprehensive overview of the tire pressures for the vehicle.",
            "properties": {
              "frontLeftTirePressure": {
                "type": "float",
                "description": "The tire pressure of the front left tire measured in psi (pounds per square inch)."
              },
              "frontRightTirePressure": {
                "type": "float",
                "description": "The tire pressure of the front right tire measured in psi (pounds per square inch)."
              },
              "rearLeftTirePressure": {
                "type": "float",
                "description": "The tire pressure of the rear left tire measured in psi (pounds per square inch)."
              },
              "rearRightTirePressure": {
                "type": "float",
                "description": "The tire pressure of the rear right tire measured in psi (pounds per square inch)."
              },
              "healthy_tire_pressure": {
                "type": "boolean",
                "description": "Returns true if all tires are within the recommended pressure range, otherwise false."
              },
              "car_info": {
                "type": "dict",
                "description": "Detailed metadata about the vehicle, including make, model, and year."
              }
            }
          }
        }
      }
    },
    {
      "name": "displaycarstatus",
      "description": "Displays the vehicle's status based on the specified display option.",
      "parameters": {
        "option": {
          "type": "string",
          "description": "Specifies the display option for vehicle status. Valid options include: [\"fuel\", \"battery\", \"doors\", \"climate\", \"headlights\", \"parkingBrake\", \"brakePedal\", \"engine\"]."
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "status": {
            "type": "dict",
            "description": "Detailed status of the vehicle according to the selected option.",
            "properties": {
              "fuelLevel": {
                "type": "float",
                "description": "[Optional] The current fuel level of the vehicle measured in gallons."
              },
              "batteryVoltage": {
                "type": "float",
                "description": "[Optional] The voltage level of the vehicle's battery in volts."
              },
              "doorStatus": {
                "type": "dict",
                "description": "[Optional] The locked or unlocked status of each vehicle door.",
                "properties": {
                  "driver": {
                    "type": "string",
                    "description": "The status of the driver's door. Possible values: [\"locked\", \"unlocked\"]"
                  },
                  "passenger": {
                    "type": "string",
                    "description": "The status of the passenger's door. Possible values: [\"locked\", \"unlocked\"]"
                  },
                  "rear_left": {
                    "type": "string",
                    "description": "The status of the rear left door. Possible values: [\"locked\", \"unlocked\"]"
                  },
                  "rear_right": {
                    "type": "string",
                    "description": "The status of the rear right door. Possible values: [\"locked\", \"unlocked\"]"
                  }
                }
              },
              "currentACTemperature": {
                "type": "float",
                "description": "[Optional] The current temperature setting for air conditioning in degrees Celsius."
              },
              "fanSpeed": {
                "type": "integer",
                "description": "[Optional] The current fan speed setting, ranging from 0 to 100."
              },
              "climateMode": {
                "type": "string",
                "description": "[Optional] The currently set climate control mode. Possible values: [\"auto\", \"cool\", \"heat\", \"defrost\"]"
              },
              "humidityLevel": {
                "type": "float",
                "description": "[Optional] The current humidity level inside the vehicle expressed as a percentage."
              },
              "headlightStatus": {
                "type": "string",
                "description": "[Optional] The operational status of the headlights. Possible values: [\"on\", \"off\"]"
              },
              "parkingBrakeStatus": {
                "type": "string",
                "description": "[Optional] The status of the parking brake. Possible values: [\"engaged\", \"released\"]"
              },
              "parkingBrakeForce": {
                "type": "float",
                "description": "[Optional] The force being applied to the parking brake measured in Newtons."
              },
              "slopeAngle": {
                "type": "float",
                "description": "[Optional] The angle of the slope on which the vehicle is positioned, measured in degrees."
              },
              "brakePedalStatus": {
                "type": "string",
                "description": "[Optional] The status of the brake pedal. Possible values: [\"pressed\", \"released\"]"
              },
              "brakePedalForce": {
                "type": "float",
                "description": "[Optional] The force being applied to the brake pedal measured in Newtons."
              },
              "engineState": {
                "type": "string",
                "description": "[Optional] The current operational state of the engine. Possible values: [\"running\", \"stopped\"]"
              },
              "metadata": {
                "type": "string",
                "description": "[Optional] Additional metadata related to the vehicle's status."
              }
            }
          }
        }
      }
    },
    {
      "name": "display_log",
      "description": "Displays log messages generated by the vehicle control system.",
      "parameters": {
        "messages": {
          "type": "array",
          "description": "An array of log messages that need to be displayed to the user."
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "log": {
            "type": "array",
            "description": "An array of messages that were displayed, which confirms successful logging.",
            "items": {
              "type": "string"
            }
          }
        }
      }
    },
    {
      "name": "estimate_distance",
      "description": "Estimates the distance between two specified cities based on their zip codes.",
      "parameters": {
        "cityA": {
          "type": "string",
          "description": "The zip code of the first city used for distance calculation."
        },
        "cityB": {
          "type": "string",
          "description": "The zip code of the second city used for distance calculation."
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "distance": {
            "type": "float",
            "description": "The calculated distance between the two cities in kilometers."
          },
          "intermediaryCities": {
            "type": "array",
            "description": "[Optional] A list of cities located between the two specified cities.",
            "items": {
              "type": "string"
            }
          }
        }
      }
    },
    {
      "name": "estimate_drive_feasibility_by_mileage",
      "description": "Estimates vehicle mileage feasibility based on the specified travel distance.",
      "parameters": {
        "distance": {
          "type": "float",
          "description": "The travel distance in miles for which the feasibility of driving is being assessed."
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "canDrive": {
            "type": "boolean",
            "description": "Indicates whether the vehicle can cover the specified distance (True) or not (False)."
          }
        }
      }
    },
    {
      "name": "fillfueltank",
      "description": "Fills the vehicle's fuel tank, accommodating up to 50 gallons.",
      "parameters": {
        "fuelAmount": {
          "type": "float",
          "description": "Specifies the additional amount of fuel to add to the tank in gallons."
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "fuelLevel": {
            "type": "float",
            "description": "Indicates the current total fuel level of the vehicle in gallons after filling."
          }
        }
      }
    },
    {
      "name": "find_nearest_tire_shop",
      "description": "Locates the closest tire shop based on the user's current location.",
      "parameters": {},
      "returns": {
        "type": "dict",
        "properties": {
          "shopLocation": {
            "type": "string",
            "description": "A string representing the geographic location (address or coordinates) of the nearest tire shop."
          }
        }
      }
    },
    {
      "name": "gallon_to_liter",
      "description": "Converts a specified volume from gallons to liters.",
      "parameters": {
        "gallon": {
          "type": "float",
          "description": "The volume in gallons that needs to be converted to liters."
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "liter": {
            "type": "float",
            "description": "The equivalent volume in liters after conversion from gallons."
          }
        }
      }
    },
    {
      "name": "get_current_speed",
      "description": "Retrieves the current speed of the vehicle in kilometers per hour (km/h).",
      "parameters": {},
      "returns": {
        "type": "dict",
        "properties": {
          "currentSpeed": {
            "type": "float",
            "description": "Current speed of the vehicle in kilometers per hour (km/h)."
          }
        }
      }
    },
    {
      "name": "get_outside_temperature_from_google",
      "description": "Retrieves the current outside temperature from Google.",
      "parameters": {},
      "returns": {
        "type": "dict",
        "properties": {
          "outsideTemperature": {
            "type": "float",
            "description": "The current outside temperature in degrees Celsius."
          }
        }
      }
    },
    {
      "name": "get_outside_temperature_from_weather_com",
      "description": "Retrieves the current outside temperature from weather data sources.",
      "parameters": {},
      "returns": {
        "type": "dict",
        "properties": {
          "outsideTemperature": {
            "type": "float",
            "description": "The current outside temperature measured in degrees Celsius."
          }
        }
      }
    },
    {
      "name": "get_zipcode_based_on_city",
      "description": "Retrieves the corresponding zipcode for a specified city.",
      "parameters": {
        "city": {
          "type": "string",
          "description": "The full name of the city for which the zipcode is requested."
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "zipcode": {
            "type": "string",
            "description": "The zipcode associated with the specified city."
          }
        }
      }
    },
    {
      "name": "liter_to_gallon",
      "description": "Converts a volume measurement from liters to gallons.",
      "parameters": {
        "liter": {
          "type": "float",
          "description": "The volume in liters that you wish to convert to gallons."
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "gallon": {
            "type": "float",
            "description": "The equivalent volume in gallons after conversion."
          }
        }
      }
    },
    {
      "name": "lockdoors",
      "description": "Controls the locking and unlocking of vehicle doors.",
      "parameters": {
        "unlock": {
          "type": "boolean",
          "description": "Indicates whether to unlock the doors (true) or lock them (false)."
        },
        "door": {
          "type": "array",
          "description": "Specifies which doors to lock or unlock. Valid options include: [\"driver\", \"passenger\", \"rear_left\", \"rear_right\"]."
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "lockStatus": {
            "type": "string",
            "description": "Indicates the current status of the locks, which can be either 'locked' or 'unlocked'."
          },
          "remainingUnlockedDoors": {
            "type": "integer",
            "description": "The count of doors that remain unlocked after the operation."
          }
        }
      }
    },
    {
      "name": "pressbrakepedal",
      "description": "Controls the vehicle's brake system by pressing the brake pedal to a specified position.",
      "parameters": {
        "pedalPosition": {
          "type": "float",
          "description": "Indicates the degree to which the brake pedal is pressed, ranging from 0 (not pressed) to 1 (fully pressed)."
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "brakePedalStatus": {
            "type": "string",
            "description": "Indicates the current status of the brake pedal, which can be either 'pressed' or 'released'."
          },
          "brakePedalForce": {
            "type": "float",
            "description": "Represents the force exerted on the brake pedal, measured in Newtons."
          }
        }
      }
    },
    {
      "name": "releasebrakepedal",
      "description": "Releases the brake pedal of the vehicle, enabling forward movement.",
      "parameters": {},
      "returns": {
        "type": "dict",
        "properties": {
          "brakePedalStatus": {
            "type": "string",
            "description": "Indicates the current status of the brake pedal. Possible values are: [\"pressed\", \"released\"]"
          },
          "brakePedalForce": {
            "type": "float",
            "description": "The magnitude of force being applied to the brake pedal, measured in Newtons."
          }
        }
      }
    },
    {
      "name": "setcruisecontrol",
      "description": "Configures the vehicle's cruise control system with specified speed and activation status.",
      "parameters": {
        "speed": {
          "type": "float",
          "description": "Target speed to set cruise control, measured in miles per hour (m/h). Must be within the range of 0 to 120 m/h and a multiple of 5."
        },
        "activate": {
          "type": "boolean",
          "description": "A flag indicating whether to activate (true) or deactivate (false) the cruise control system."
        },
        "distanceToNextVehicle": {
          "type": "float",
          "description": "The distance to the next vehicle ahead in meters, which helps manage safe following distance."
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "cruiseStatus": {
            "type": "string",
            "description": "Indicates the current status of the cruise control system. Possible values: [\"active\", \"inactive\"]."
          },
          "currentSpeed": {
            "type": "float",
            "description": "Current speed of the vehicle while cruise control is engaged, reported in kilometers per hour (km/h)."
          },
          "distanceToNextVehicle": {
            "type": "float",
            "description": "The distance to the next vehicle in meters, which is crucial for safe driving practices."
          }
        }
      }
    },
    {
      "name": "setheadlights",
      "description": "Controls the headlight system of the vehicle, enabling various operational modes.",
      "parameters": {
        "mode": {
          "type": "string",
          "description": "Specifies the operational mode of the headlights. Possible values are: [\"on\" - headlights are turned on, \"off\" - headlights are turned off, \"auto\" - headlights are automatically controlled based on ambient light conditions.]"
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "headlightStatus": {
            "type": "string",
            "description": "Indicates the current status of the headlights after the command is executed. Possible values are: [\"on\" - headlights are currently activated, \"off\" - headlights are currently deactivated.]"
          }
        }
      }
    },
    {
      "name": "set_navigation",
      "description": "Facilitates destination navigation for vehicle control systems.",
      "parameters": {
        "destination": {
          "type": "string",
          "description": "The destination to navigate to, formatted as 'Street, City, State'. Provide the full address for accurate navigation."
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "status": {
            "type": "string",
            "description": "Indicates the current status of the navigation process, such as 'success', 'failed', or 'in progress'."
          }
        }
      }
    },
    {
      "name": "startengine",
      "description": "Initiates the vehicle's engine, enabling operational functions.",
      "parameters": {
        "ignitionMode": {
          "type": "string",
          "description": "Specifies the desired ignition state of the vehicle. [Enum]: [\"START\" to activate the engine, \"STOP\" to deactivate it]"
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "engineState": {
            "type": "string",
            "description": "Indicates the current status of the engine. [Enum]: [\"running\" if the engine is active, \"stopped\" if the engine is inactive]"
          },
          "fuelLevel": {
            "type": "float",
            "description": "Represents the current fuel level of the vehicle, measured in gallons."
          },
          "batteryVoltage": {
            "type": "float",
            "description": "Displays the voltage of the vehicle's battery, measured in volts."
          }
        }
      }
    },
    {
      "name": "send_email",
      "description": "通过SMTP协议发送电子邮件给一个或多个收件人，支持HTML格式内容、附件上传、抄送和密送功能，并提供发送状态跟踪和错误处理机制",
      "parameters": {
        "to_address": {
          "type": "string",
          "description": "主要收件人的电子邮箱地址，必须符合RFC 5322标准格式，例如：user@example.com。支持国际化域名"
        },
        "subject": {
          "type": "string",
          "description": "邮件主题行，最大长度998字符，支持UTF-8编码，用于简要描述邮件内容，会显示在收件人的邮箱列表中"
        },
        "body": {
          "type": "string",
          "description": "邮件正文内容，支持纯文本和HTML格式。HTML内容将自动处理内联样式和图片。最大大小25MB，支持多语言字符集"
        },
        "cc": {
          "type": "array",
          "description": "抄送收件人邮箱地址列表，这些收件人将收到邮件副本，且其他所有收件人都能看到抄送列表。每个地址必须是有效的邮箱格式",
          "default": []
        },
        "attachments": {
          "type": "array",
          "description": "附件文件路径列表，支持常见文件格式（PDF、DOC、图片等）。单个文件最大25MB，总附件大小不超过50MB。文件路径必须是服务器可访问的绝对路径",
          "default": []
        }
      },
      "returns": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "邮件发送操作是否成功完成，true表示邮件已成功提交到邮件服务器队列，false表示发送失败"
          },
          "message_id": {
            "type": "string",
            "description": "邮件的全球唯一标识符（Message-ID），由邮件服务器生成，格式如'<unique-id@domain.com>'，可用于邮件跟踪和问题排查"
          },
          "message": {
            "type": "string",
            "description": "详细的发送状态描述信息，包括成功确认或具体的错误原因，如'邮件发送成功'或'收件人地址格式错误'"
          }
        }
      }
    },
    {
      "name": "schedule_meeting",
      "description": "创建并安排会议，支持线上和线下会议模式，自动发送日历邀请给参会人员，集成主流视频会议平台，提供会议提醒和冲突检测功能",
      "parameters": {
        "title": {
          "type": "string",
          "description": "会议标题，用于标识会议主题，最大长度200字符，支持emoji和特殊字符，将显示在所有参会人员的日历中"
        },
        "start_time": {
          "type": "string",
          "description": "会议开始时间，必须使用ISO 8601格式（如：2024-03-15T14:30:00Z或2024-03-15T14:30:00+08:00），支持时区信息，不能早于当前时间"
        },
        "duration_minutes": {
          "type": "integer",
          "description": "会议持续时间，以分钟为单位，取值范围5-1440分钟（最长24小时），系统将根据此时间计算会议结束时间并检查参会人员时间冲突"
        },
        "attendees": {
          "type": "array",
          "description": "参会人员邮箱地址列表，系统将向这些邮箱发送会议邀请和提醒。支持最多500个参会者，每个邮箱地址必须有效且符合RFC标准"
        },
        "location": {
          "type": "string",
          "description": "会议地点信息，可以是物理地址（如'北京市朝阳区xxx会议室'）或在线会议平台名称。如果是在线会议，系统将自动生成会议链接",
          "default": "在线会议"
        },
        "description": {
          "type": "string",
          "description": "会议详细描述和议程安排，支持Markdown格式，最大长度2000字符，可包含会议目标、讨论要点、预期成果等信息",
          "default": ""
        }
      },
      "returns": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "会议创建操作是否成功，true表示会议已成功创建并发送邀请，false表示创建失败（如时间冲突、参会者无效等）"
          },
          "meeting_id": {
            "type": "string",
            "description": "会议的全球唯一标识符，格式为UUID，用于后续的会议管理操作（如修改、取消、查询等），长度36字符"
          },
          "meeting_url": {
            "type": "string",
            "description": "在线会议的加入链接，支持主流平台（Zoom、Teams、腾讯会议等），参会者可直接点击加入。仅在location为在线会议时返回"
          },
          "message": {
            "type": "string",
            "description": "会议创建状态的详细描述，包括成功确认信息或具体错误原因，如'会议创建成功，已发送邀请给3位参会者'或'时间冲突：与已有会议重叠'"
          }
        }
      }
    },
    {
      "name": "search_contacts",
      "description": "在企业通讯录和个人联系人数据库中执行智能搜索，支持模糊匹配、拼音搜索、正则表达式，并提供联系人信息的实时同步和隐私保护功能",
      "parameters": {
        "query": {
          "type": "string",
          "description": "搜索关键词，支持姓名、邮箱、电话号码、公司名称等信息的模糊查询。支持中英文、拼音首字母、部分匹配，最大长度100字符"
        },
        "search_fields": {
          "type": "array",
          "description": "指定要搜索的字段范围，可选值包括：name（姓名）、email（邮箱）、phone（电话）、company（公司）、department（部门）、title（职位）。优化搜索性能和精准度",
          "default": [
            "name",
            "email",
            "phone"
          ]
        },
        "limit": {
          "type": "integer",
          "description": "返回结果的最大数量限制，取值范围1-1000，较小的值能提供更快的响应速度。建议根据UI展示需求设置合适的值",
          "default": 10
        }
      },
      "returns": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "搜索操作是否成功执行，true表示搜索完成（即使无结果），false表示搜索过程中发生错误（如数据库连接失败）"
          },
          "contacts": {
            "type": "array",
            "description": "符合搜索条件的联系人信息列表，按相关性排序，包含联系人的基本信息和扩展属性",
            "items": {
              "type": "object",
              "properties": {
                "contact_id": {
                  "type": "string",
                  "description": "联系人的唯一标识符"
                },
                "name": {
                  "type": "string",
                  "description": "联系人的完整姓名"
                },
                "email": {
                  "type": "string",
                  "description": "主要邮箱地址"
                },
                "phone": {
                  "type": "string",
                  "description": "主要联系电话"
                },
                "company": {
                  "type": "string",
                  "description": "所属公司或组织名称"
                }
              }
            }
          },
          "total_count": {
            "type": "integer",
            "description": "数据库中符合搜索条件的联系人总数（可能超过返回的limit限制），用于分页显示和统计信息"
          },
          "message": {
            "type": "string",
            "description": "搜索操作的详细状态信息，包括搜索耗时、匹配策略说明或错误详情，如'找到5个匹配联系人，用时0.12秒'或'数据库连接超时'"
          }
        }
      }
    },
    {
      "name": "backup_data",
      "description": "备份指定目录或文件到云存储",
      "parameters": {
        "source_path": {
          "type": "string",
          "description": "需要备份的源路径"
        },
        "backup_name": {
          "type": "string",
          "description": "备份任务名称"
        },
        "destination": {
          "type": "string",
          "description": "备份目标位置",
          "default": "cloud_storage"
        },
        "compression": {
          "type": "boolean",
          "description": "是否压缩备份文件",
          "default": true
        },
        "encryption": {
          "type": "boolean",
          "description": "是否加密备份文件",
          "default": true
        }
      },
      "returns": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "备份是否成功"
          },
          "backup_id": {
            "type": "string",
            "description": "备份任务唯一标识符"
          },
          "backup_size": {
            "type": "integer",
            "description": "备份文件大小（字节）"
          },
          "backup_url": {
            "type": "string",
            "description": "备份文件下载链接"
          },
          "message": {
            "type": "string",
            "description": "备份状态描述"
          }
        }
      }
    },
    {
      "name": "restore_data",
      "description": "从备份恢复数据到指定位置",
      "parameters": {
        "backup_id": {
          "type": "string",
          "description": "备份任务标识符"
        },
        "restore_path": {
          "type": "string",
          "description": "数据恢复目标路径"
        },
        "overwrite": {
          "type": "boolean",
          "description": "是否覆盖现有文件",
          "default": false
        }
      },
      "returns": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "恢复是否成功"
          },
          "restored_files": {
            "type": "array",
            "description": "恢复的文件列表"
          },
          "message": {
            "type": "string",
            "description": "恢复状态描述"
          }
        }
      }
    },
    {
      "name": "analyze_performance",
      "description": "分析系统性能指标并生成报告",
      "parameters": {
        "time_range": {
          "type": "string",
          "description": "分析时间范围（如'1h', '24h', '7d'）"
        },
        "metrics": {
          "type": "array",
          "description": "要分析的性能指标列表",
          "default": [
            "cpu",
            "memory",
            "disk",
            "network"
          ]
        },
        "report_format": {
          "type": "string",
          "description": "报告格式",
          "default": "json"
        }
      },
      "returns": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "分析是否成功"
          },
          "report": {
            "type": "object",
            "description": "性能分析报告"
          },
          "summary": {
            "type": "string",
            "description": "性能总结"
          },
          "recommendations": {
            "type": "array",
            "description": "优化建议列表"
          },
          "message": {
            "type": "string",
            "description": "分析状态描述"
          }
        }
      }
    },
    {
      "name": "generate_report",
      "description": "Generates a customized report based on a specified template and data.",
      "parameters": {
        "template_name": {
          "type": "string",
          "description": "The name of the report template to be utilized for report generation."
        },
        "data_source": {
          "type": "string",
          "description": "Identifier for the data source from which data will be retrieved for the report."
        },
        "output_format": {
          "type": "string",
          "description": "Format for the generated report (options: pdf, docx, html).",
          "default": "pdf"
        },
        "filters": {
          "type": "object",
          "description": "Criteria for filtering the data prior to report generation.",
          "default": {}
        }
      },
      "returns": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Indicates whether the report generation was successful."
          },
          "report_id": {
            "type": "string",
            "description": "Unique identifier for the generated report."
          },
          "download_url": {
            "type": "string",
            "description": "URL link to download the generated report."
          },
          "page_count": {
            "type": "integer",
            "description": "Total number of pages contained in the generated report."
          },
          "message": {
            "type": "string",
            "description": "Description of the report generation status or error message if applicable."
          }
        }
      }
    },
    {
      "name": "process_payment",
      "description": "处理在线支付交易，支持多种支付方式和货币类型，提供实时反欺诈检测、PCI DSS合规的安全加密、交易状态跟踪和自动对账功能",
      "parameters": {
        "amount": {
          "type": "number",
          "description": "支付金额，必须为正数，支持最多2位小数。最小金额0.01，最大金额999999.99。系统将进行金额合理性验证和反洗钱检查"
        },
        "currency": {
          "type": "string",
          "description": "货币类型，使用ISO 4217标准三字母代码，如CNY（人民币）、USD（美元）、EUR（欧元）。支持汇率自动转换和多币种结算",
          "default": "CNY"
        },
        "payment_method": {
          "type": "string",
          "description": "支付方式标识符，支持：credit_card（信用卡）、debit_card（借记卡）、alipay（支付宝）、wechat（微信支付）、bank_transfer（银行转账）。每种方式有不同的处理流程和手续费"
        },
        "order_id": {
          "type": "string",
          "description": "商户订单号，必须唯一且不超过64字符，用于关联商户系统的订单信息。支持字母、数字、下划线和短横线，用于交易追踪和对账"
        },
        "customer_id": {
          "type": "string",
          "description": "客户在商户系统中的唯一标识符，用于用户画像分析、风险评估和交易历史关联。长度不超过128字符，支持匿名化处理"
        }
      },
      "returns": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "支付交易是否成功完成，true表示资金已成功转移并确认，false表示支付失败或被拒绝（需查看message了解具体原因）"
          },
          "transaction_id": {
            "type": "string",
            "description": "支付网关生成的全球唯一交易标识符，格式为32位十六进制字符串，用于后续的退款、查询、对账等操作，永久有效"
          },
          "status": {
            "type": "string",
            "description": "交易当前状态，可能值：success（成功）、failed（失败）、pending（处理中）、canceled（已取消）、refunded（已退款）。状态会实时更新"
          },
          "receipt_url": {
            "type": "string",
            "description": "电子收据的下载链接，PDF格式，包含完整的交易信息、商户信息和法律条款。链接有效期30天，支持多次下载"
          },
          "message": {
            "type": "string",
            "description": "详细的交易状态描述和处理结果说明，包括成功确认或失败原因（如余额不足、卡片过期、风控拦截等），便于用户理解和客服处理"
          }
        }
      }
    },
    {
      "name": "verify_identity",
      "description": "执行多层次用户身份验证，支持短信验证码、邮箱验证、生物识别（指纹、人脸、声纹）、硬件令牌等多种认证方式，提供实时风险评估和反欺诈检测",
      "parameters": {
        "user_id": {
          "type": "string",
          "description": "用户的唯一标识符，可以是系统内部ID、邮箱地址或手机号码。系统将根据此标识查找用户的认证配置和历史行为模式，长度不超过128字符"
        },
        "verification_method": {
          "type": "string",
          "description": "身份验证方式，支持：sms（短信验证码）、email（邮箱验证码）、biometric（生物识别）、totp（时间密码）、hardware_token（硬件令牌）、password（密码验证）。可组合使用实现多因子认证"
        },
        "verification_code": {
          "type": "string",
          "description": "验证码或认证凭据，根据verification_method的不同而变化：短信/邮箱为6位数字码，TOTP为6-8位数字，生物识别为加密的特征数据，硬件令牌为设备生成的动态码"
        }
      },
      "returns": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "验证操作是否成功执行，true表示验证流程正常完成，false表示系统错误或参数无效（非身份验证失败）"
          },
          "verified": {
            "type": "boolean",
            "description": "用户身份是否通过验证，true表示身份认证成功，false表示认证失败（如验证码错误、生物特征不匹配等）"
          },
          "confidence_score": {
            "type": "number",
            "description": "身份验证的置信度评分，范围0.0-1.0，基于验证方式的安全等级、用户行为分析、设备信任度等因素综合计算。0.8以上为高可信度"
          },
          "expires_at": {
            "type": "string",
            "description": "验证结果的过期时间，ISO 8601格式。过期后需要重新验证。不同验证方式有不同的有效期：短信5分钟，生物识别24小时，硬件令牌1小时"
          },
          "message": {
            "type": "string",
            "description": "详细的验证状态和结果说明，包括成功确认、失败原因、安全建议等信息，如'身份验证成功，置信度95%'或'验证码已过期，请重新获取'"
          }
        }
      }
    },
    {
      "name": "monitor_health",
      "description": "监控系统健康状态并发送告警",
      "parameters": {
        "service_name": {
          "type": "string",
          "description": "要监控的服务名称"
        },
        "check_interval": {
          "type": "integer",
          "description": "检查间隔（秒）",
          "default": 60
        },
        "alert_threshold": {
          "type": "object",
          "description": "告警阈值配置"
        },
        "notification_channels": {
          "type": "array",
          "description": "通知渠道列表",
          "default": [
            "email"
          ]
        }
      },
      "returns": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "监控设置是否成功"
          },
          "monitor_id": {
            "type": "string",
            "description": "监控任务标识符"
          },
          "current_status": {
            "type": "string",
            "description": "当前服务状态"
          },
          "next_check": {
            "type": "string",
            "description": "下次检查时间"
          },
          "message": {
            "type": "string",
            "description": "监控设置状态描述"
          }
        }
      }
    },
    {
      "name": "absolute_value",
      "description": "This tool belongs to the Math API, which provides various mathematical operations. Tool description: Calculate the absolute value of a number.",
      "parameters": {
        "number": {
          "type": "float",
          "description": "The number to calculate the absolute value of."
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "result": {
            "type": "float",
            "description": "The absolute value of the number."
          }
        }
      }
    },
    {
      "name": "add",
      "description": "This tool belongs to the Math API, which provides various mathematical operations. Tool description: Add two numbers.",
      "parameters": {
        "a": {
          "type": "float",
          "description": "First number."
        },
        "b": {
          "type": "float",
          "description": "Second number."
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "result": {
            "type": "float",
            "description": "Sum of the two numbers."
          }
        }
      }
    },
    {
      "name": "divide",
      "description": "Divides one floating-point number by another and returns the quotient.",
      "parameters": {
        "a": {
          "type": "float",
          "description": "The numerator or the dividend in the division operation."
        },
        "b": {
          "type": "float",
          "description": "The denominator or the divisor in the division operation. Must not be zero."
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "result": {
            "type": "float",
            "description": "The quotient obtained from dividing the numerator by the denominator."
          }
        }
      }
    },
    {
      "name": "imperial_si_conversion",
      "description": "Convert a numerical value between imperial units and SI (metric) units.",
      "parameters": {
        "value": {
          "type": "float",
          "description": "The numeric value that needs to be converted between units."
        },
        "unit_in": {
          "type": "string",
          "description": "The unit of measurement for the input value. This should be a recognized imperial or SI unit."
        },
        "unit_out": {
          "type": "string",
          "description": "The desired unit of measurement for the output value. This should also be a recognized imperial or SI unit."
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "result": {
            "type": "float",
            "description": "The value after conversion, expressed in the specified output unit."
          }
        }
      }
    },
    {
      "name": "logarithm",
      "description": "This tool belongs to the Math API, which provides various mathematical operations. Tool description: Compute the logarithm of a number with adjustable precision using mpmath.",
      "parameters": {
        "value": {
          "type": "float",
          "description": "The number to compute the logarithm of."
        },
        "base": {
          "type": "float",
          "description": "The base of the logarithm."
        },
        "precision": {
          "type": "integer",
          "description": "Desired precision for the result."
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "result": {
            "type": "float",
            "description": "The logarithm of the number with respect to the given base."
          }
        }
      }
    },
    {
      "name": "max_value",
      "description": "This tool belongs to the Math API, which provides various mathematical operations. Tool description: Find the maximum value in a list of numbers.",
      "parameters": {
        "numbers": {
          "type": "array",
          "description": "List of numbers to find the maximum from."
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "result": {
            "type": "float",
            "description": "The maximum value in the list."
          }
        }
      }
    },
    {
      "name": "mean",
      "description": "This tool belongs to the Math API, which provides various mathematical operations. Tool description: Calculate the mean of a list of numbers.",
      "parameters": {
        "numbers": {
          "type": "array",
          "description": "List of numbers to calculate the mean of."
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "result": {
            "type": "float",
            "description": "Mean of the numbers."
          }
        }
      }
    },
    {
      "name": "min_value",
      "description": "This tool belongs to the Math API, which provides various mathematical operations. Tool description: Find the minimum value in a list of numbers.",
      "parameters": {
        "numbers": {
          "type": "array",
          "description": "List of numbers to find the minimum from."
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "result": {
            "type": "float",
            "description": "The minimum value in the list."
          }
        }
      }
    },
    {
      "name": "multiply",
      "description": "This tool belongs to the Math API, which provides various mathematical operations. Tool description: Multiply two numbers.",
      "parameters": {
        "a": {
          "type": "float",
          "description": "First number."
        },
        "b": {
          "type": "float",
          "description": "Second number."
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "result": {
            "type": "float",
            "description": "Product of the two numbers."
          }
        }
      }
    },
    {
      "name": "percentage",
      "description": "This tool belongs to the Math API, which provides various mathematical operations. Tool description: Calculate the percentage of a part relative to a whole.",
      "parameters": {
        "part": {
          "type": "float",
          "description": "The part value."
        },
        "whole": {
          "type": "float",
          "description": "The whole value."
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "result": {
            "type": "float",
            "description": "The percentage of the part relative to the whole."
          }
        }
      }
    },
    {
      "name": "power",
      "description": "This tool belongs to the Math API, which provides various mathematical operations. Tool description: Raise a number to a power.",
      "parameters": {
        "base": {
          "type": "float",
          "description": "The base number."
        },
        "exponent": {
          "type": "float",
          "description": "The exponent."
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "result": {
            "type": "float",
            "description": "The base raised to the power of the exponent."
          }
        }
      }
    },
    {
      "name": "round_number",
      "description": "This tool belongs to the Math API, which provides various mathematical operations. Tool description: Round a number to a specified number of decimal places.",
      "parameters": {
        "number": {
          "type": "float",
          "description": "The number to round."
        },
        "decimal_places": {
          "type": "integer",
          "description": "The number of decimal places to round to. Defaults to 0.",
          "default": 0
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "result": {
            "type": "float",
            "description": "The rounded number."
          }
        }
      }
    },
    {
      "name": "si_unit_conversion",
      "description": "This tool belongs to the Math API, which provides various mathematical operations. Tool description: Convert a value from one SI unit to another.",
      "parameters": {
        "value": {
          "type": "float",
          "description": "Value to be converted."
        },
        "unit_in": {
          "type": "string",
          "description": "Unit of the input value."
        },
        "unit_out": {
          "type": "string",
          "description": "Unit to convert the value to."
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "result": {
            "type": "float",
            "description": "Converted value in the new unit."
          }
        }
      }
    },
    {
      "name": "square_root",
      "description": "This tool belongs to the Math API, which provides various mathematical operations. Tool description: Calculate the square root of a number with adjustable precision using the decimal module.",
      "parameters": {
        "number": {
          "type": "float",
          "description": "The number to calculate the square root of."
        },
        "precision": {
          "type": "integer",
          "description": "Desired precision for the result."
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "result": {
            "type": "float",
            "description": "The square root of the number, or an error message."
          }
        }
      }
    },
    {
      "name": "standard_deviation",
      "description": "Calculate the standard deviation of a numerical dataset.",
      "parameters": {
        "numbers": {
          "type": "array",
          "description": "An array containing the numerical values for which the standard deviation will be computed."
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "result": {
            "type": "float",
            "description": "The calculated standard deviation of the provided numbers, indicating the dispersion of the dataset."
          }
        }
      }
    },
    {
      "name": "subtract",
      "description": "This tool belongs to the Math API, which provides various mathematical operations. Tool description: Subtract one number from another.",
      "parameters": {
        "a": {
          "type": "float",
          "description": "Number to subtract from."
        },
        "b": {
          "type": "float",
          "description": "Number to subtract."
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "result": {
            "type": "float",
            "description": "Difference between the two numbers."
          }
        }
      }
    },
    {
      "name": "sum_values",
      "description": "This tool belongs to the Math API, which provides various mathematical operations. Tool description: Calculate the sum of a list of numbers.",
      "parameters": {
        "numbers": {
          "type": "array",
          "description": "List of numbers to sum."
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "result": {
            "type": "float",
            "description": "The sum of all numbers in the list."
          }
        }
      }
    },
    {
      "name": "create_file",
      "description": "Creates a new file at the specified path with the specified content.",
      "parameters": {
        "path": {
          "type": "string",
          "description": "The complete file path where the file will be created, including the file name and extension."
        },
        "content": {
          "type": "string",
          "description": "The textual content to be written to the new file."
        }
      }
    },
    {
      "name": "delete_file",
      "description": "Removes a specified file from the filesystem permanently.",
      "parameters": {
        "file_path": {
          "type": "string",
          "description": "Absolute or relative path to the file that needs to be deleted."
        }
      },
      "returns": {
        "success": "Indicates whether the file deletion was successful (true) or failed (false)."
      }
    },
    {
      "name": "list_files",
      "description": "Retrieve a list of files in the specified directory.",
      "parameters": {
        "dir": {
          "type": "string",
          "description": "The file system path of the directory to be scanned for files."
        }
      }
    },
    {
      "name": "file_info",
      "description": "Retrieves and provides comprehensive information about specified files, including their characteristics and metadata.",
      "parameters": {
        "file_path": {
          "type": "string",
          "description": "The path to the file for which information is to be retrieved. This must be a valid file path in the system."
        }
      },
      "returns": {
        "type": "object",
        "description": "An object containing detailed information about the specified file, including attributes such as file size, creation date, modification date, and file type."
      }
    },
    {
      "name": "move_file",
      "description": "Moves a file from a specified source location to a destination target path.",
      "parameters": {
        "source": {
          "type": "string",
          "description": "The full file path of the file to be moved, including its filename and extension."
        },
        "target": {
          "type": "string",
          "description": "The destination path where the file should be relocated, including the new filename and extension if applicable."
        }
      }
    },
    {
      "name": "copy_file",
      "description": "Copies a file from a specified source path to a designated destination path.",
      "parameters": {
        "src": {
          "type": "string",
          "description": "The file path of the source file that you wish to copy."
        },
        "dst": {
          "type": "string",
          "description": "The target file path where the copied file will be placed."
        }
      },
      "returns": {
        "success": {
          "type": "bool",
          "description": "Returns true if the file copy operation was successful; otherwise, returns false."
        }
      }
    },
    {
      "name": "upload_file",
      "description": "Facilitates the upload of a specified file to the designated server URL.",
      "parameters": {
        "file": {
          "type": "file",
          "description": "The file object that needs to be uploaded to the server."
        },
        "url": {
          "type": "string",
          "description": "The server endpoint URL where the file will be uploaded."
        }
      }
    },
    {
      "name": "download_file",
      "description": "Downloads a file from a specified URL to a designated local path.",
      "parameters": {
        "url": {
          "type": "string",
          "description": "The URL of the file to be downloaded. This should be a valid and accessible URL."
        },
        "save_path": {
          "type": "string",
          "description": "The local file system path where the downloaded file will be saved. Ensure that the directory exists and is writable."
        }
      }
    },
    {
      "name": "search_web",
      "description": "Performs a web search based on the provided query string.",
      "parameters": {
        "query": {
          "type": "string",
          "description": "The search term or phrase to be queried on the web."
        },
        "limit": {
          "type": "integer",
          "description": "The maximum number of search results to return. Defaults to 10 if not specified.",
          "default": 10
        }
      }
    },
    {
      "name": "get_weather",
      "description": "Retrieve current weather information for a specified location.",
      "parameters": {
        "location": {
          "type": "string",
          "description": "The geographical location for which the weather information is requested. This can be a city name, zip code, or geographic coordinates."
        },
        "units": {
          "type": "string",
          "default": "celsius",
          "description": "The unit of measurement for temperature. Acceptable values are 'celsius', 'fahrenheit', and 'kelvin'. Defaults to 'celsius' if not specified."
        }
      }
    },
    {
      "name": "create_user",
      "description": "Creates a new user account with specified credentials.",
      "parameters": {
        "username": {
          "type": "string",
          "description": "Unique identifier for the user, must be between 3 to 20 characters."
        },
        "email": {
          "type": "string",
          "description": "Valid email address of the user, used for account verification and notifications."
        },
        "password": {
          "type": "string",
          "description": "Secure password for the user account, recommended to be at least 8 characters long, including letters and numbers."
        }
      }
    },
    {
      "name": "delete_user",
      "description": "Removes a specified user's account from the system, ensuring the permanent deletion of user data for privacy and security.",
      "parameters": {
        "user_id": {
          "type": "integer",
          "description": "The unique identifier of the user account to be deleted. This must correspond to an existing user in the system."
        }
      },
      "returns": {
        "type": "boolean",
        "description": "Returns true if the user account was successfully deleted; otherwise, returns false."
      }
    },
    {
      "name": "get_user",
      "description": "Retrieves detailed information about a user based on their unique ID.",
      "parameters": {
        "id": {
          "type": "integer",
          "description": "The unique identifier for the user whose information is to be retrieved."
        }
      }
    },
    {
      "name": "update_user",
      "description": "Modifies the profile information for a specified user.",
      "parameters": {
        "user_id": {
          "type": "integer",
          "description": "The unique identifier of the user whose profile is to be updated."
        },
        "data": {
          "type": "object",
          "description": "An object containing the profile attributes to be updated, such as name, email, or address."
        }
      }
    },
    {
      "name": "list_users",
      "description": "Retrieves a complete list of all registered users in the system.",
      "parameters": {}
    },
    {
      "name": "authenticate_user",
      "description": "Validates user credentials for access to secure resources.",
      "parameters": {
        "username": {
          "type": "string",
          "description": "The unique identifier for the user, typically an email address or username."
        },
        "password": {
          "type": "string",
          "description": "The password associated with the user account, used for authentication."
        }
      }
    },
    {
      "name": "create_database",
      "description": "Creates a new database with the specified name.",
      "parameters": {
        "name": {
          "type": "string",
          "description": "The unique name assigned to the new database. It must adhere to naming conventions."
        }
      }
    },
    {
      "name": "execute_query",
      "description": "Executes a specified SQL query with optional parameters.",
      "parameters": {
        "sql": {
          "type": "string",
          "description": "The SQL query string to be executed against the database."
        },
        "params": {
          "type": "array",
          "description": "An array of parameters to be bound to the SQL query, used for dynamic values in the query execution."
        }
      }
    },
    {
      "name": "create_table",
      "description": "Creates a new database table based on the specified schema.",
      "parameters": {
        "table_name": {
          "type": "string",
          "description": "The name of the table to be created in the database."
        },
        "schema": {
          "type": "object",
          "description": "An object defining the structure of the table, including columns and their data types."
        }
      }
    },
    {
      "name": "drop_table",
      "description": "Permanently removes a specified table from the database, including all its data.",
      "parameters": {
        "table": {
          "type": "string",
          "description": "The name of the table to be dropped from the database. This name must match the existing table exactly."
        }
      }
    },
    {
      "name": "insert_record",
      "description": "Inserts a new record into the specified database table.",
      "parameters": {
        "table": {
          "type": "string",
          "description": "The name of the table where the record will be inserted."
        },
        "data": {
          "type": "object",
          "description": "An object representing the data for the record, with key-value pairs corresponding to the table's columns and their respective values."
        }
      }
    },
    {
      "name": "update_record",
      "description": "Apply updates to a specific record in a specified database table.",
      "parameters": {
        "table": {
          "type": "string",
          "description": "The name of the database table where the record resides."
        },
        "id": {
          "type": "integer",
          "description": "The unique identifier of the record to be updated."
        },
        "data": {
          "type": "object",
          "description": "An object containing key-value pairs representing the fields and their new values to update in the record."
        }
      }
    },
    {
      "name": "delete_record",
      "description": "Removes a specified record from a designated table in the database.",
      "parameters": {
        "table_name": {
          "type": "string",
          "description": "The name of the database table from which the record will be deleted."
        },
        "record_id": {
          "type": "integer",
          "description": "The unique identifier of the record that needs to be deleted."
        }
      }
    },
    {
      "name": "browse_web",
      "description": "Fetch and display the content of a specified web page.",
      "parameters": {
        "url": {
          "type": "string",
          "description": "The complete URL of the web page to be accessed and retrieved."
        }
      }
    },
    {
      "name": "click_element",
      "description": "Simulates a click action on a specified web element identified by its CSS selector.",
      "parameters": {
        "selector": {
          "type": "string",
          "description": "A valid CSS selector string that identifies the target web element to be clicked."
        },
        "page_id": {
          "type": "string",
          "description": "A unique identifier for the page where the element resides, used to ensure correct context when performing the click action."
        }
      }
    },
    {
      "name": "fill_form",
      "description": "Automate the completion of web forms by providing necessary field values.",
      "parameters": {
        "form_data": {
          "type": "object",
          "description": "An object containing key-value pairs where keys represent the form field names and values represent the corresponding data to be entered into those fields."
        },
        "page_id": {
          "type": "string",
          "description": "A unique identifier for the specific web page on which the form is located, enabling accurate targeting of the form to be filled."
        }
      }
    },
    {
      "name": "get_page_content",
      "description": "Retrieve and extract textual and multimedia content from a specified web page.",
      "parameters": {
        "url": {
          "type": "string",
          "description": "The URL of the web page from which content will be extracted. It should start with 'http://' or 'https://'."
        }
      }
    },
    {
      "name": "add_contact",
      "description": "This tool belongs to the Message API, which is used to manage user interactions in a workspace. Tool description: Add a contact to the workspace.",
      "parameters": {
        "user_name": {
          "type": "string",
          "description": "User name of contact to be added."
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "added_status": {
            "type": "boolean",
            "description": "True if the contact was added successfully, False otherwise."
          },
          "user_id": {
            "type": "string",
            "description": "User ID of the added contact."
          },
          "message": {
            "type": "string",
            "description": "A message describing the result of the addition attempt."
          }
        }
      }
    },
    {
      "name": "delete_message",
      "description": "Delete a specified message from a user's message history in a workspace.",
      "parameters": {
        "receiver_id": {
          "type": "string",
          "description": "Unique identifier of the user to whom the message was sent."
        },
        "message_id": {
          "type": "integer",
          "description": "Unique identifier of the message that is to be deleted."
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "deleted_status": {
            "type": "boolean",
            "description": "Indicates whether the deletion was successful (True) or not (False)."
          },
          "message_id": {
            "type": "integer",
            "description": "Unique identifier of the message that was deleted."
          },
          "message": {
            "type": "string",
            "description": "A descriptive message providing the result of the deletion process."
          }
        }
      }
    },
    {
      "name": "get_message_stats",
      "description": "Retrieve message statistics for the current user within a workspace.",
      "parameters": {},
      "returns": {
        "type": "dict",
        "properties": {
          "stats": {
            "type": "dict",
            "description": "A dictionary containing detailed statistics about messages for the user.",
            "properties": {
              "received_count": {
                "type": "integer",
                "description": "The total number of messages received by the current user."
              },
              "total_contacts": {
                "type": "integer",
                "description": "The total number of unique contacts that the user has interacted with."
              }
            }
          }
        }
      }
    },
    {
      "name": "get_user_id",
      "description": "Retrieve the user ID associated with a specified username in the Message API.",
      "parameters": {
        "user": {
          "type": "string",
          "description": "The username of the user for whom the ID is being requested."
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "user_id": {
            "type": "string",
            "description": "The unique identifier of the specified user."
          }
        }
      }
    },
    {
      "name": "message_get_login_status",
      "description": "Retrieves the login status of the current user within the Message API framework.",
      "parameters": {},
      "returns": {
        "type": "dict",
        "properties": {
          "login_status": {
            "type": "boolean",
            "description": "Indicates whether the current user is logged in (true) or not (false)."
          }
        }
      }
    },
    {
      "name": "message_login",
      "description": "Authenticates a user for the messaging application using their unique user ID.",
      "parameters": {
        "user_id": {
          "type": "string",
          "description": "The unique identifier of the user attempting to log in."
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "login_status": {
            "type": "boolean",
            "description": "Indicates whether the login was successful (True) or failed (False)."
          },
          "message": {
            "type": "string",
            "description": "Detailed message providing feedback on the login attempt, such as success or failure reasons."
          }
        }
      }
    },
    {
      "name": "search_messages",
      "description": "Search for messages within a workspace that contain a specified keyword.",
      "parameters": {
        "keyword": {
          "type": "string",
          "description": "The specific word or phrase to search for in messages. This is case-sensitive."
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "results": {
            "type": "array",
            "description": "An array of dictionaries, each representing a message that contains the specified keyword.",
            "items": {
              "type": "dict",
              "properties": {
                "receiver_id": {
                  "type": "string",
                  "description": "The unique identifier of the user who received the message."
                },
                "message": {
                  "type": "string",
                  "description": "The content of the message that contains the specified keyword."
                }
              }
            }
          }
        }
      }
    },
    {
      "name": "send_message",
      "description": "Sends a message to a specified user within a workspace for user interaction.",
      "parameters": {
        "receiver_id": {
          "type": "string",
          "description": "The unique user ID of the recipient to whom the message will be sent."
        },
        "message": {
          "type": "string",
          "description": "The content of the message that is to be transmitted to the recipient."
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "sent_status": {
            "type": "boolean",
            "description": "Indicates whether the message was sent successfully (true) or not (false)."
          },
          "message_id": {
            "type": "integer",
            "description": "A unique identifier for the message that was successfully sent."
          },
          "message": {
            "type": "string",
            "description": "A textual description of the outcome of the message sending attempt, providing additional information."
          }
        }
      }
    },
    {
      "name": "view_messages_sent",
      "description": "Retrieve all historical messages sent by the current user within the Message API framework.",
      "parameters": {},
      "returns": {
        "type": "dict",
        "properties": {
          "messages": {
            "type": "dict",
            "description": "A dictionary containing messages organized by recipient. For example, the structure may look like: {\"USR001\":[\"Hello\"], \"USR002\":[\"World\"]}, where keys are user identifiers and values are lists of messages sent to those users."
          }
        }
      }
    },
    {
      "name": "authenticate_travel",
      "description": "Authenticates a user with the travel API for booking and managing travel services.",
      "parameters": {
        "client_id": {
          "type": "string",
          "description": "Unique identifier assigned to the client application by App Management."
        },
        "client_secret": {
          "type": "string",
          "description": "Secret key associated with the client application, provided by App Management."
        },
        "refresh_token": {
          "type": "string",
          "description": "Token received after initial authentication, used to obtain new access tokens."
        },
        "grant_type": {
          "type": "string",
          "description": "Specifies the type of access requested. Options include: 'read_write', 'read', or 'write'."
        },
        "user_first_name": {
          "type": "string",
          "description": "First name of the user for whom the authentication is being performed."
        },
        "user_last_name": {
          "type": "string",
          "description": "Last name of the user for whom the authentication is being performed."
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "expires_in": {
            "type": "integer",
            "description": "Duration in seconds until the access token expires."
          },
          "access_token": {
            "type": "string",
            "description": "Bearer token used for authorization in subsequent API requests."
          },
          "token_type": {
            "type": "string",
            "description": "Type of the token, usually set to 'Bearer'."
          },
          "scope": {
            "type": "string",
            "description": "Permissions granted by the access token."
          }
        }
      }
    },
    {
      "name": "book_flight",
      "description": "Facilitates flight bookings using provided travel details and payment information.",
      "parameters": {
        "access_token": {
          "type": "string",
          "description": "The authentication token required to authorize access to the booking system."
        },
        "card_id": {
          "type": "string",
          "description": "The unique identifier for the credit card to be used for payment during the booking process."
        },
        "travel_date": {
          "type": "string",
          "description": "The scheduled date of travel, formatted as YYYY-MM-DD."
        },
        "travel_from": {
          "type": "string",
          "description": "The IATA airport code representing the departure location."
        },
        "travel_to": {
          "type": "string",
          "description": "The IATA airport code representing the destination location."
        },
        "travel_class": {
          "type": "string",
          "description": "The class of service for the booking (e.g., economy, business)."
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "booking_id": {
            "type": "string",
            "description": "A unique identifier for the booking transaction."
          },
          "transaction_id": {
            "type": "string",
            "description": "A unique identifier for the financial transaction related to the booking."
          },
          "booking_status": {
            "type": "boolean",
            "description": "Indicates the success of the booking; True if the booking was successful, and False if it failed."
          },
          "booking_history": {
            "type": "dict",
            "description": "Contains previous booking details if long context is enabled, providing a history of transactions.",
            "properties": {
              "booking_id": {
                "type": "string",
                "description": "The unique identifier for a previous booking in the history."
              },
              "transaction_id": {
                "type": "string",
                "description": "The unique identifier for the financial transaction associated with the previous booking."
              },
              "travel_date": {
                "type": "string",
                "description": "The scheduled date of the previous travel."
              },
              "travel_from": {
                "type": "string",
                "description": "The IATA airport code for the departure location of the previous booking."
              },
              "travel_to": {
                "type": "string",
                "description": "The IATA airport code for the destination location of the previous booking."
              },
              "travel_class": {
                "type": "string",
                "description": "The class of service for the previous booking (e.g., economy, business)."
              },
              "travel_cost": {
                "type": "float",
                "description": "The total cost associated with the previous travel booking."
              }
            }
          }
        }
      }
    },
    {
      "name": "cancel_booking",
      "description": "Cancels a specified booking within the travel system.",
      "parameters": {
        "access_token": {
          "type": "string",
          "description": "The access token provided after user authentication, required for authorization."
        },
        "booking_id": {
          "type": "string",
          "description": "A unique identifier for the booking that needs to be canceled."
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "cancel_status": {
            "type": "boolean",
            "description": "Indicates the success of the cancellation process: True if the booking was successfully canceled; False if the cancellation failed."
          }
        }
      }
    },
    {
      "name": "compute_exchange_rate",
      "description": "This tool belongs to the travel system, which allows users to book flights, manage credit cards, and view budget information. Tool description: Compute the exchange rate between two currencies",
      "parameters": {
        "base_currency": {
          "type": "string",
          "description": "The base currency. [Enum]: USD, RMB, EUR, JPY, GBP, CAD, AUD, INR, RUB, BRL, MXN"
        },
        "target_currency": {
          "type": "string",
          "description": "The target currency. [Enum]: USD, RMB, EUR, JPY, GBP, CAD, AUD, INR, RUB, BRL, MXN"
        },
        "value": {
          "type": "float",
          "description": "The value to convert"
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "exchanged_value": {
            "type": "float",
            "description": "The value after the exchange"
          }
        }
      }
    },
    {
      "name": "contact_customer_support",
      "description": "Connect with travel booking customer support for immediate assistance via online communication.",
      "parameters": {
        "booking_id": {
          "type": "string",
          "description": "Unique identifier associated with the specific booking to which the inquiry pertains."
        },
        "message": {
          "type": "string",
          "description": "Detailed message outlining the issue or inquiry to be addressed by customer support."
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "customer_support_message": {
            "type": "string",
            "description": "Response message from customer support providing assistance or information related to the inquiry."
          }
        }
      }
    },
    {
      "name": "get_all_credit_cards",
      "description": "Retrieve all registered credit cards within the travel system.",
      "parameters": {},
      "returns": {
        "type": "dict",
        "properties": {
          "credit_card_list": {
            "type": "dict",
            "description": "A dictionary containing details of all registered credit cards.",
            "properties": {
              "card_number": {
                "type": "string",
                "description": "The unique number associated with the credit card."
              },
              "expiration_date": {
                "type": "string",
                "description": "The expiration date of the credit card in the format YYYY-MM-DD."
              },
              "cardholder_name": {
                "type": "string",
                "description": "The full name of the individual to whom the credit card is issued."
              },
              "card_verification_value": {
                "type": "integer",
                "description": "The three or four-digit verification number on the credit card."
              },
              "balance": {
                "type": "float",
                "description": "The current available balance on the credit card."
              }
            }
          }
        }
      }
    },
    {
      "name": "get_budget_fiscal_year",
      "description": "Retrieve fiscal year budget information from the travel system.",
      "parameters": {
        "lastModifiedAfter": {
          "type": "string",
          "description": "Filters the fiscal years to those modified after the specified date. The date must be in UTC format (YYYY-MM-DDTHH:MM:SS). If not provided, all fiscal years will be returned without modification filtering.",
          "default": "None"
        },
        "includeRemoved": {
          "type": "string",
          "description": "Specifies whether to include fiscal years that have been marked as removed. Defaults to false if not specified.",
          "default": "None"
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "budget_fiscal_year": {
            "type": "string",
            "description": "The fiscal year associated with the budget retrieved from the system."
          }
        }
      }
    },
    {
      "name": "get_credit_card_balance",
      "description": "This tool belongs to the travel system, which allows users to book flights, manage credit cards, and view budget information. Tool description: Get the balance of a credit card",
      "parameters": {
        "access_token": {
          "type": "string",
          "description": "The access token obtained from the authenticate"
        },
        "card_id": {
          "type": "string",
          "description": "The ID of the credit card"
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "card_balance": {
            "type": "float",
            "description": "The balance of the credit card"
          }
        }
      }
    },
    {
      "name": "get_flight_cost",
      "description": "Retrieves the estimated cost of a flight in USD based on origin, destination, date, and class.",
      "parameters": {
        "travel_from": {
          "type": "string",
          "description": "The 3-letter IATA airport code of the departure airport."
        },
        "travel_to": {
          "type": "string",
          "description": "The 3-letter IATA airport code of the destination airport."
        },
        "travel_date": {
          "type": "string",
          "description": "The date of travel formatted as 'YYYY-MM-DD'."
        },
        "travel_class": {
          "type": "string",
          "description": "The class of service for the flight. Valid options are: economy, business, first."
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "travel_cost_list": {
            "type": "array",
            "description": "An array containing the estimated costs of the flight for the specified parameters.",
            "items": {
              "type": "float"
            }
          }
        }
      }
    },
    {
      "name": "get_nearest_airport_by_city",
      "description": "Retrieve the nearest airport for a specified city location.",
      "parameters": {
        "location": {
          "type": "string",
          "description": "The name of the city for which to find the nearest airport. [Enum]: Rivermist, Stonebrook, Maplecrest, Silverpine, Shadowridge, London, Paris, Sunset Valley, Oakendale, Willowbend, Crescent Hollow, Autumnville, Pinehaven, Greenfield, San Francisco, Los Angeles, New York, Chicago, Boston, Beijing, Hong Kong, Rome, Tokyo"
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "nearest_airport": {
            "type": "string",
            "description": "The name of the nearest airport corresponding to the specified city."
          }
        }
      }
    },
    {
      "name": "list_all_airports",
      "description": "Retrieves a comprehensive list of all available airports within the travel system.",
      "parameters": {},
      "returns": {
        "type": "dict",
        "properties": {
          "airports": {
            "type": "array",
            "description": "An array containing the names of all airports available for booking.",
            "items": {
              "type": "string"
            }
          }
        }
      }
    },
    {
      "name": "purchase_insurance",
      "description": "Facilitates the purchase of travel insurance for a specific booking.",
      "parameters": {
        "access_token": {
          "type": "string",
          "description": "A token obtained through authentication, required for authorization."
        },
        "insurance_type": {
          "type": "string",
          "description": "Specifies the category of insurance to be purchased (e.g., health, trip cancellation)."
        },
        "insurance_cost": {
          "type": "float",
          "description": "The monetary amount required to purchase the specified insurance."
        },
        "booking_id": {
          "type": "string",
          "description": "A unique identifier for the travel booking associated with the insurance."
        },
        "card_id": {
          "type": "string",
          "description": "The unique identifier for the credit card that will be charged for the insurance."
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "insurance_id": {
            "type": "string",
            "description": "A unique identifier for the purchased insurance policy."
          },
          "insurance_status": {
            "type": "boolean",
            "description": "Indicates the success of the insurance purchase; true if the transaction was successful, false otherwise."
          }
        }
      }
    },
    {
      "name": "register_credit_card",
      "description": "Enables users to securely register a credit card for travel-related transactions.",
      "parameters": {
        "access_token": {
          "type": "string",
          "description": "A secure token generated during user authentication for API access."
        },
        "card_number": {
          "type": "string",
          "description": "The full number of the credit card to be registered, typically 16 digits."
        },
        "expiration_date": {
          "type": "string",
          "description": "The date when the credit card expires, formatted as MM/YYYY."
        },
        "cardholder_name": {
          "type": "string",
          "description": "The name of the individual to whom the credit card is issued, exactly as it appears on the card."
        },
        "card_verification_number": {
          "type": "integer",
          "description": "The three or four-digit card verification code printed on the credit card."
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "card_id": {
            "type": "string",
            "description": "A unique identifier for the registered credit card, used for future reference in transactions."
          }
        }
      }
    },
    {
      "name": "retrieve_invoice",
      "description": "Retrieves the invoice for a specified booking in the travel system.",
      "parameters": {
        "access_token": {
          "type": "string",
          "description": "A valid access token obtained from the authentication process, granting access to user data."
        },
        "booking_id": {
          "type": "string",
          "description": "The unique identifier for the specific booking for which the invoice is requested.",
          "default": "None"
        },
        "insurance_id": {
          "type": "string",
          "description": "The unique identifier for associated travel insurance, if applicable.",
          "default": "None"
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "invoice": {
            "type": "dict",
            "description": "A detailed invoice for the specified booking, including travel details and costs.",
            "properties": {
              "booking_id": {
                "type": "string",
                "description": "The unique identifier of the booking associated with this invoice."
              },
              "travel_date": {
                "type": "string",
                "description": "The date on which the planned travel will take place."
              },
              "travel_from": {
                "type": "string",
                "description": "The departure location for the travel."
              },
              "travel_to": {
                "type": "string",
                "description": "The destination location for the travel."
              },
              "travel_class": {
                "type": "string",
                "description": "The class of service selected for the travel (e.g., Economy, Business)."
              },
              "travel_cost": {
                "type": "float",
                "description": "The total cost associated with the travel, reflected in the invoice."
              },
              "transaction_id": {
                "type": "string",
                "description": "The unique identifier assigned to the financial transaction related to this booking."
              }
            }
          }
        }
      }
    },
    {
      "name": "set_budget_limit",
      "description": "Set a specified budget limit for travel expenses in the user's account.",
      "parameters": {
        "access_token": {
          "type": "string",
          "description": "A valid access token acquired from the authentication process that verifies user identity."
        },
        "budget_limit": {
          "type": "float",
          "description": "The maximum budget limit to set for the user, expressed in United States Dollars (USD)."
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "budget_limit": {
            "type": "float",
            "description": "The confirmed budget limit that has been successfully set, expressed in United States Dollars (USD)."
          }
        }
      }
    },
    {
      "name": "travel_get_login_status",
      "description": "Fetch the current login status for the travel system user account.",
      "parameters": {},
      "returns": {
        "type": "dict",
        "properties": {
          "status": {
            "type": "boolean",
            "description": "True indicates the user is logged in; false indicates the user is logged out."
          }
        }
      }
    },
    {
      "name": "verify_traveler_information",
      "description": "Validates traveler information for flight bookings and associated services.",
      "parameters": {
        "first_name": {
          "type": "string",
          "description": "The first name of the traveler as it appears on their identification."
        },
        "last_name": {
          "type": "string",
          "description": "The last name of the traveler as it appears on their identification."
        },
        "date_of_birth": {
          "type": "string",
          "description": "The traveler's date of birth formatted as YYYY-MM-DD, used for age verification."
        },
        "passport_number": {
          "type": "string",
          "description": "The passport number of the traveler, required for international travel verification."
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "verification_status": {
            "type": "boolean",
            "description": "Indicates the result of the verification process: True if successful, False if unsuccessful."
          },
          "verification_failure": {
            "type": "string",
            "description": "Contains the detailed reason for the verification failure, if applicable."
          }
        }
      }
    },
    {
      "name": "authenticate_twitter",
      "description": "Authenticates a Twitter user using their username and password credentials.",
      "parameters": {
        "username": {
          "type": "string",
          "description": "The Twitter username of the user attempting to authenticate."
        },
        "password": {
          "type": "string",
          "description": "The password associated with the user's Twitter account."
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "authentication_status": {
            "type": "boolean",
            "description": "Indicates whether the authentication was successful (True) or failed (False)."
          }
        }
      }
    },
    {
      "name": "comment",
      "description": "This tool belongs to the TwitterAPI, which provides core functionality for posting tweets, retweeting, commenting, and following users on Twitter. Tool description: Comment on a tweet for the authenticated user.",
      "parameters": {
        "tweet_id": {
          "type": "integer",
          "description": "ID of the tweet to comment on."
        },
        "comment_content": {
          "type": "string",
          "description": "Content of the comment."
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "comment_status": {
            "type": "string",
            "description": "Status of the comment action."
          }
        }
      }
    },
    {
      "name": "follow_user",
      "description": "Follow a specified user for the authenticated Twitter account.",
      "parameters": {
        "username_to_follow": {
          "type": "string",
          "description": "The Twitter username of the user to be followed, excluding the '@' symbol."
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "follow_status": {
            "type": "boolean",
            "description": "Indicates the result of the follow action: 'True' if the user was successfully followed, 'False' if the authenticated account is already following the specified user."
          }
        }
      }
    },
    {
      "name": "get_tweet",
      "description": "Retrieve a specific tweet using its unique identifier.",
      "parameters": {
        "tweet_id": {
          "type": "integer",
          "description": "The unique identifier of the tweet to be retrieved."
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique identifier of the retrieved tweet."
          },
          "username": {
            "type": "string",
            "description": "The username of the user who authored the tweet."
          },
          "content": {
            "type": "string",
            "description": "The textual content of the tweet."
          },
          "tags": {
            "type": "array",
            "description": "An array of hashtags associated with the tweet.",
            "items": {
              "type": "string"
            }
          },
          "mentions": {
            "type": "array",
            "description": "An array of usernames that are mentioned in the tweet.",
            "items": {
              "type": "string"
            }
          }
        }
      }
    },
    {
      "name": "get_tweet_comments",
      "description": "Retrieves all comments associated with a specific tweet via the TwitterAPI.",
      "parameters": {
        "tweet_id": {
          "type": "integer",
          "description": "Unique identifier of the tweet for which comments are to be retrieved."
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "comments": {
            "type": "array",
            "description": "An array of objects, each representing a comment on the specified tweet.",
            "items": {
              "type": "dict",
              "properties": {
                "username": {
                  "type": "string",
                  "description": "The Twitter username of the individual who posted the comment."
                },
                "content": {
                  "type": "string",
                  "description": "The textual content of the comment."
                }
              }
            }
          }
        }
      }
    },
    {
      "name": "get_user_stats",
      "description": "Retrieves detailed statistics for a specified Twitter user.",
      "parameters": {
        "username": {
          "type": "string",
          "description": "The Twitter username (handle) of the user for whom statistics are to be retrieved."
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "tweet_count": {
            "type": "integer",
            "description": "The total number of tweets authored by the user."
          },
          "following_count": {
            "type": "integer",
            "description": "The total number of accounts that the specified user is currently following."
          },
          "retweet_count": {
            "type": "integer",
            "description": "The total number of tweets that the user has retweeted."
          }
        }
      }
    },
    {
      "name": "get_user_tweets",
      "description": "This tool belongs to the TwitterAPI, which provides core functionality for posting tweets, retweeting, commenting, and following users on Twitter. Tool description: Retrieve all tweets from a specific user.",
      "parameters": {
        "username": {
          "type": "string",
          "description": "Username of the user whose tweets to retrieve."
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "user_tweets": {
            "type": "array",
            "description": "List of dictionaries, each containing tweet information.",
            "items": {
              "type": "dict",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "ID of the retrieved tweet."
                },
                "username": {
                  "type": "string",
                  "description": "Username of the tweet's author."
                },
                "content": {
                  "type": "string",
                  "description": "Content of the tweet."
                },
                "tags": {
                  "type": "array",
                  "description": "List of tags associated with the tweet.",
                  "items": {
                    "type": "string"
                  }
                },
                "mentions": {
                  "type": "array",
                  "description": "List of users mentioned in the tweet.",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    {
      "name": "list_all_following",
      "description": "Retrieves a list of users followed by the authenticated Twitter user.",
      "parameters": {},
      "returns": {
        "type": "dict",
        "properties": {
          "following_list": {
            "type": "array",
            "description": "An array containing the usernames of all users that the authenticated user is currently following.",
            "items": {
              "type": "string"
            }
          }
        }
      }
    },
    {
      "name": "mention",
      "description": "This tool belongs to the TwitterAPI, which provides core functionality for posting tweets, retweeting, commenting, and following users on Twitter. Tool description: Mention specified users in a tweet.",
      "parameters": {
        "tweet_id": {
          "type": "integer",
          "description": "ID of the tweet where users are mentioned."
        },
        "mentioned_usernames": {
          "type": "array",
          "description": "List of usernames to be mentioned."
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "mention_status": {
            "type": "string",
            "description": "Status of the mention action."
          }
        }
      }
    },
    {
      "name": "post_tweet",
      "description": "Posts a tweet on behalf of the authenticated user in the TwitterAPI.",
      "parameters": {
        "content": {
          "type": "string",
          "description": "The text content of the tweet being posted."
        },
        "tags": {
          "type": "array",
          "description": "An array of hashtags to include in the tweet. Each tag should start with '#'. This is optional and only used if the user wishes to tag the tweet.",
          "default": []
        },
        "mentions": {
          "type": "array",
          "description": "An array of usernames to mention in the tweet. Each mention should start with '@'. This is optional and only used if the user wishes to mention others.",
          "default": []
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique identifier for the posted tweet."
          },
          "username": {
            "type": "string",
            "description": "The username of the authenticated user who posted the tweet."
          },
          "content": {
            "type": "string",
            "description": "The textual content of the tweet that was posted."
          },
          "tags": {
            "type": "array",
            "description": "An array of hashtags that are associated with the tweeted content.",
            "items": {
              "type": "string"
            }
          },
          "mentions": {
            "type": "array",
            "description": "An array of usernames that are mentioned in the tweet.",
            "items": {
              "type": "string"
            }
          }
        }
      }
    },
    {
      "name": "posting_get_login_status",
      "description": "Retrieves the current user's login status in the Twitter API.",
      "parameters": {},
      "returns": {
        "type": "dict",
        "properties": {
          "login_status": {
            "type": "boolean",
            "description": "Indicates whether the current user is logged in (true) or not (false)."
          }
        }
      }
    },
    {
      "name": "retweet",
      "description": "This tool allows the authenticated user to retweet a specified tweet on Twitter.",
      "parameters": {
        "tweet_id": {
          "type": "integer",
          "description": "The unique identifier of the tweet that the user wants to retweet."
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "retweet_status": {
            "type": "string",
            "description": "Indicates whether the retweet action was successful or if an error occurred."
          }
        }
      }
    },
    {
      "name": "search_tweets",
      "description": "This tool belongs to the TwitterAPI, which provides core functionality for posting tweets, retweeting, commenting, and following users on Twitter. Tool description: Search for tweets containing a specific keyword.",
      "parameters": {
        "keyword": {
          "type": "string",
          "description": "Keyword to search for in the content of the tweets."
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "matching_tweets": {
            "type": "array",
            "description": "List of dictionaries, each containing tweet information.",
            "items": {
              "type": "dict",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "ID of the retrieved tweet."
                },
                "username": {
                  "type": "string",
                  "description": "Username of the tweet's author."
                },
                "content": {
                  "type": "string",
                  "description": "Content of the tweet."
                },
                "tags": {
                  "type": "array",
                  "description": "List of tags associated with the tweet.",
                  "items": {
                    "type": "string"
                  }
                },
                "mentions": {
                  "type": "array",
                  "description": "List of users mentioned in the tweet.",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    {
      "name": "unfollow_user",
      "description": "Unfollows a specified user for the authenticated Twitter account.",
      "parameters": {
        "username_to_unfollow": {
          "type": "string",
          "description": "The Twitter username of the user to be unfollowed, excluding the '@' symbol."
        }
      },
      "returns": {
        "type": "dict",
        "properties": {
          "unfollow_status": {
            "type": "boolean",
            "description": "Returns true if the user was successfully unfollowed; false if the user was not being followed or if the action failed."
          }
        }
      }
    }
  ]
}